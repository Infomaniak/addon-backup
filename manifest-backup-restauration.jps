type: update

name: SwissBackup

settings:
  fields:

  - name: mode

    type: radio-fieldset

    values:

      restauration: Restauration de vos données

      backup: Sauvegarde de vos données

    default: deploy

    showIf:

      restauration:

      - name: id

        caption: ID Backup

        type: string

        required: true



      - name: destination

        caption: Indiquer un répertoire de destination

        type: string

        required: true

      backup:

      - name: emplacement

        caption: Emplacement Swiss-Backup

        type: string

        required: true

        default: sb_project_SBI-AJ891787

      - name: User

        caption: Nom utilisateur

        type: string

        required: true

        default: SBI-AJ891787

      - name: key

        caption: Clé de l'utilisateur

        type: string

        required: true

        default:

      - name: path

        caption: Répertoires à Backuper

        type: string

        placeholder: path/to/folder1/, path/to/folder2/, path/to/folderX

        required: true

      - type: list
        name: sauvegarde
        caption: Choix de votre méthode de sauvegarde
        tooltip: hourly -> backup every hours -> keep last 24 backups/hour, 7/days daily -> backup every day at 23:00 PM -> keep last 7 backups/days
        values:
          hourly: hourly
          daily: daily
    hideLabel: false
    hidden: false
    editable: false

  default: daily

  required: true




targetNodes:

  nodeGroup: '*'



onInstall:

  if ('${settings.mode}' == 'backup'):
     - backup
  responses:
    4109:
        type: error
        message: Vos dossiers sont faux regardé dans /tmp/fails-folders




  if ('${settings.mode}' == 'restauration'):
      - restauration


actions:

  backup:


      - script: |
          import org.apache.commons.httpclient.HttpClient;
          import org.apache.commons.httpclient.HttpStatus;
          import org.apache.commons.httpclient.methods.PostMethod;
          import org.apache.commons.httpclient.methods.StringRequestEntity;

          var client = new HttpClient();

          var name = "${settings.User}";
          var password = "${settings.key}";

          var requestEntity = new StringRequestEntity(toJSON({
              "auth": {
                  "identity": {
                      "methods": [
                          "password"
                      ],
                      "password": {
                          "user": {
                              "domain": {
                                  "id": "default"
                              },
                              "name": name,
                              "password": password
                          }
                      }
                  },
                  "scope": {
                      "project": {
                          "domain": {
                              "id": "default"
                          },
                          "name": "${settings.emplacement}"
                      }
                  }
              }
          }), "application/json", "UTF-8");


          var post = new PostMethod("https://swiss-backup.infomaniak.com/identity/v3/auth/tokens");

          post.setRequestEntity(requestEntity);

          var status = client.executeMethod(post);
          post.releaseConnection();

          if (status == HttpStatus.SC_CREATED) { // 201
            return { result : 0 };
          } else if (status == HttpStatus.SC_UNAUTHORIZED) { // 401
              return { type: "error", message: "Les identifiants Swissbackup ne sont pas corrects, veuillez vérifier les informations de connexions dans vos mails" };
          }

          return { type: "error", message: "unknown error" };


      - cmd [${targetNodes.nodeGroup}]: |-

          test=$(echo ${settings.path} | tr  ',' ' ' )
          for i in ${test}"" ; do

          if [ -d "$i" ]

          then

          echo "Directory "$i" exists."

          else

          for p in ${test}"" ; do



          if [ ! -d "$p" ]



          then

              echo "Error: Directory "$p" does not exists."  >> /root/bad.dirs

          fi

          done

          exit 1

          fi
          done

          wget -O restic.bz2 https://github.com/restic/restic/releases/download/v0.9.5/restic_0.9.5_linux_amd64.bz2
          bunzip2 restic.bz2
          chmod +x restic
          mv restic /usr/bin/
          restic self-update
          touch /tmp/openrc.sh
          > /tmp/openrc.sh
          touch /tmp/secret.txt
          password="${user.appPassword}"
          if [ ! -s /tmp/secret.txt ]; then eval "echo $password >> /tmp/secret.txt"; else echo "nothing"; fi
          echo "export OS_AUTH_URL="https://swiss-backup.infomaniak.com/identity/v3"" >> /tmp/openrc.sh
          echo "export OS_REGION_NAME="RegionOne"" >> /tmp/openrc.sh
          echo "export OS_PROJECT_NAME="${settings.emplacement}"" >> /tmp/openrc.sh
          echo "export OS_PASSWORD="${settings.key}"" >> /tmp/openrc.sh
          echo "export OS_USER_DOMAIN_NAME="default"" >> /tmp/openrc.sh
          echo "export OS_USERNAME="${settings.User}"" >> /tmp/openrc.sh
          echo "export OS_PROJECT_DOMAIN_NAME="default"" >> /tmp/openrc.sh
          echo "export RESTIC_REPOSITORY="swift:${settings.emplacement}:/$(hostname -a)"" >> /tmp/openrc.sh
          echo "export RESTIC_PASSWORD_FILE=/tmp/secret.txt" >> /tmp/openrc.sh
          . /tmp/openrc.sh
          restic check || restic -r swift:sb_project_SBI-AJ891787:/$(hostname -a) init
          touch /run/user/restic.lock
          touch /tmp/Backups_plan


        user: root

      - if ('${settings.sauvegarde}' == 'hourly' ): hourly

      - if ( '${settings.sauvegarde}' == 'daily' ): daily

  hourly:
      cmd [${targetNodes.nodeGroup}]:
              - curl -fsS https://raw.githubusercontent.com/axelJacquet/addon-backup/master/hourly.sh --output hourly.sh
              - chmod u+x hourly.sh
              - if [ -f "/var/spool/cron/crontabs/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/crontabs/root; elif [ -f "/var/spool/cron/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/root; else echo "first install"; fi
              -  crontab -u root -l | { cat; echo "0 */1 * * * /usr/bin/flock --nonblock --conflict-exit-code 0 /run/user/restic.lock /root/hourly.sh -f \"${settings.path}\" >> /var/log/myjob.log 2>&1 "; } | crontab -




      user: root



  daily:
      cmd [${targetNodes.nodeGroup}]:
              - curl -fsS https://raw.githubusercontent.com/axelJacquet/addon-backup/master/daily.sh --output daily.sh
              - chmod u+x daily.sh
              - if [ -f "/var/spool/cron/crontabs/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/crontabs/root; elif [ -f "/var/spool/cron/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/root; else echo "first install"; fi
              -  crontab -u root -l | { cat; echo "0 23 * * * /usr/bin/flock --nonblock --conflict-exit-code 0 /run/user/restic.lock /root/daily.sh -f \"${settings.path}\" >> /var/log/myjob.log 2>&1 "; } | crontab -





      user: root

  success:

      text: success!! Vos doss

      mail: Voici le mot de passe de votre emplacement Swift crypté, gardez le précieusement.


  restauration:

               install:

                   jps: https://raw.githubusercontent.com/axelJacquet/addon-backup/master/test-call-restauration.jps
                   settings:
                      id: "${settings.id}"
                      destination: "${settings.destination}"
                      node: "${targetNodes.nodeGroup}"
