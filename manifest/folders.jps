type: update
name: Add-on backup
baseUrl: https://raw.githubusercontent.com/Infomaniak/addon-backup/master/

globals:

  pass: ${fn.md5([user.uid])}
  
targetNodes:

  nodeGroup: '*'

onInstall:

 - script: scripts/credentials.cs

 - cmd[${settings.node}]: |-

          test=$(echo ${settings.path} | tr  ',' ' ' )

          for i in ${test}"" ; do

          if [ -d "$i" ]

          then

          echo "Directory "$i" exists."

          else

          for p in ${test}"" ; do

          if [ ! -d "$p" ]

          then

              echo "Error: Directory "$p" does not exists."  >> /tmp/fails-folders

          fi

          done

          exit 1

          fi

          done

          wget -O restic.bz2 https://github.com/restic/restic/releases/download/v0.9.5/restic_0.9.5_linux_amd64.bz2

          bunzip2 restic.bz2

          chmod +x restic

          mv restic /usr/bin/
          
          restic self-update

          curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x jq
          
          mv jq /usr/bin/

          mkdir -p /home/.config/
          
          mkdir -p /home/.config/swissbackup/

          touch /home/.config/swissbackup/openrc.sh

          > /home/.config/swissbackup/openrc.sh

          touch /home/.config/swissbackup/secret.txt

          password=${globals.pass}

          if [ ! -s /home/.config/swissbackup/secret.txt ]; then echo "$password" >> /home/.config/swissbackup/secret.txt; else echo "nothing"; fi

          echo "export OS_AUTH_URL="https://swiss-backup.infomaniak.com/identity/v3"" >> /home/.config/swissbackup/openrc.sh

          echo "export OS_REGION_NAME="RegionOne"" >> /home/.config/swissbackup/openrc.sh

          echo "export OS_PROJECT_NAME="sb_project_${settings.User}"" >> /home/.config/swissbackup/openrc.sh

          echo "export OS_PASSWORD="${settings.key}"" >> /home/.config/swissbackup/openrc.sh

          echo "export OS_USER_DOMAIN_NAME="default"" >> /home/.config/swissbackup/openrc.sh

          echo "export OS_USERNAME="${settings.User}"" >> /home/.config/swissbackup/openrc.sh

          echo "export OS_PROJECT_DOMAIN_NAME="default"" >> /home/.config/swissbackup/openrc.sh

          echo "export RESTIC_REPOSITORY="swift:sb_project_${settings.User}:/Jelastic-$(hostname -a)"" >> /home/.config/swissbackup/openrc.sh

          echo "export RESTIC_PASSWORD_FILE=/home/.config/swissbackup/secret.txt" >> /home/.config/swissbackup/openrc.sh

          . /home/.config/swissbackup/openrc.sh

          restic check || restic -r swift:sb_project_${settings.User}:/Jelastic-$(hostname -a) init
          
          mkdir -p /run/user/

          touch /run/user/restic.lock
          
   user: root
   
 - if ('${settings.sauvegarde}' == 'hourly' ): hourly
 
 - if ( '${settings.sauvegarde}' == 'daily' ): daily    
responses:

  4109:

    type: error

    message: Your filled files do not exist, look in /tmp/fails-folders
    
actions:
 
  hourly:

      cmd [${settings.node}]: |-

              curl -fsS https://raw.githubusercontent.com/Infomaniak/addon-backup/master/scripts/retention.sh --output retention.sh

              chmod u+x retention.sh
              
              if [ -f "/var/spool/cron/crontabs/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/crontabs/root; elif [ -f "/var/spool/cron/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/root; else echo "first install"; fi
              
              crontab -u root -l | { cat; echo "* * * * * /usr/bin/nohup /usr/bin/flock --nonblock --conflict-exit-code 0 /run/user/restic.lock /root/retention.sh -f \"${settings.path}\" -y \"${settings.year}\" -m \"${settings.month}\" -d \"${settings.day}\" -h \"${settings.hour}\" >> /var/log/first-backup.log 2>&1 "; } | crontab -

              crontab -u root -l | { cat; echo "0 */1 * * * /usr/bin/nohup /usr/bin/flock --nonblock --conflict-exit-code 0 /run/user/restic.lock /root/retention.sh -f \"${settings.path}\" -y \"${settings.year}\" -m \"${settings.month}\" -d \"${settings.day}\" -h \"${settings.hour}\" >> /var/log/restic.log 2>&1 "; } | crontab -
              
              if [ ! -f "/var/log/restic.log" ]; then crontab -u root -l | { cat; echo "0 0 1 * * > /var/log/restic.log  "; } | crontab -; fi
              
              touch /var/log/restic.log



      user: root

  daily:

      cmd [${settings.node}]: |-

              curl -fsS https://raw.githubusercontent.com/Infomaniak/addon-backup/master/scripts/retention.sh --output retention.sh

              chmod u+x retention.sh
              
              if [ -f "/var/spool/cron/crontabs/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/crontabs/root; elif [ -f "/var/spool/cron/root" ]; then sed -i '/restic.lock/d' /var/spool/cron/root; else echo "first install"; fi
              
              crontab -u root -l | { cat; echo "* * * * * /usr/bin/nohup /usr/bin/flock --nonblock --conflict-exit-code 0 /run/user/restic.lock /root/retention.sh -f \"${settings.path}\" -y \"${settings.year}\" -m \"${settings.month}\" -d \"${settings.day}\" -h \"${settings.hour}\" >> /var/log/first-backup.log 2>&1 "; } | crontab -

              crontab -u root -l | { cat; echo "0 23 * * * /usr/bin/nohup /usr/bin/flock --nonblock --conflict-exit-code 0 /run/user/restic.lock /root/retention.sh -f \"${settings.path}\" -y \"${settings.year}\" -m \"${settings.month}\" -d \"${settings.day}\" -h \"${settings.hour}\" >> /var/log/restic.log 2>&1 "; } | crontab -
              
              if [ ! -f "/var/log/restic.log" ]; then crontab -u root -l | { cat; echo "0 0 1 * * > /var/log/restic.log  "; } | crontab -; fi

              touch /var/log/restic.log

      user: root
